# Struttura dei file `.mask`

Questo documento definisce la struttura, la semantica e le regole interpretative dei file `.mask` utilizzati per la descrizione di scenari, test automatici e logiche di processo nei progetti gestiti dal team.

## 1. Struttura generale

Un file `.mask` è un file JSON (o JSON-like) composto da una lista di blocchi/scenari principali, ciascuno contenente tipicamente:

- `titolo`: (stringa) nome logico dello scenario o della sezione.
- `mascheraComune`: (boolean) indica se la maschera è condivisa.
- `ambiente`: (intero) indice o codice ambiente.
- `test`: (array) eventuali test associati (spesso vuoto).
- `fill`: oggetto che contiene la parte principale delle istruzioni (azioni, punti mask).

### Esempio semplificato

```json
[
  {
    "titolo": "INIZIO",
    "mascheraComune": false,
    "ambiente": 0,
    "test": [],
    "fill": {
      "sheetName": "id-foglio",
      "numberOfRow": 3,
      "fillData": [
        { ...punto mask 1... },
        { ...punto mask 2... }
      ],
      "Records": null
    },
    "errori": []
  }
]
```

## 2. Punti mask (azioni)

Ogni elemento di `fillData` è detto “punto mask” e rappresenta una singola azione, controllo o operazione. Un punto mask è composto da:

- `test`: oggetto che definisce l’azione/controllo.
  - `errore`: (stringa) descrizione errore (spesso vuoto).
  - `element`: oggetto con la definizione dell’oggetto su cui agire.
    - `test`: **TIPO DI OGGETTO** (vedi sezione 3)
    - `label`: etichetta logica o visualizzata.
    - `xPath`/`tmpxPath`: (opzionale) selettore xpath per oggetti web.
    - altri campi: dipendono dal tipo di oggetto.
  - `ready`: (boolean) se l’azione è pronta da eseguire.
  - `input`: (string/oggetto) rappresentazione serializzata dell’input.
  - `attributi`: (opzionale) attributi extra.
- `commento`: (opzionale) descrizione o annotazione.
- `values`: array di valori associati (es. valore da inserire, selezionare, aspettarsi).

### Esempio di punto mask

```json
{
  "test": {
    "errore": "",
    "element": {
      "test": "input",
      "label": "Username:",
      "xPath": "//input[@id='user']"
    },
    "ready": true,
    "input": "{ test:'input', label:'Username:' }"
  },
  "commento": null,
  "values": ["utente_prova"]
}
```

## 3. Tipi di oggetto (`element.test`)

Il campo **`element.test`** è il discriminante principale del punto mask:
Il campo element.test assume uno dei valori riportati di seguito, suddivisi in due categorie.

3.1 Elementi o proprietà correnti del browser

Usati per identificare e interagire con elementi HTML, componenti grafici o proprietà della finestra del browser:

input – campo di testo o input generico (<input> di qualsiasi tipo)

titolo – titolo della pagina o di una sezione

errori – area di visualizzazione errori/messaggi

cards – contenitore a schede/card layout

pulsante – pulsante HTML

link – collegamento ipertestuale

pulsantemenu – pulsante interno a un menu

mainmenu – menu principale dell’applicazione

navbar – barra di navigazione

etichetta – testo o label associata a un elemento

tab – scheda di navigazione/tab

tabella – tabella Html

dialog – finestra di dialogo o modale

menu – menu a tendina o contestuale

variabile – variabile visibile nella UI o associata, il titolo è indicato nella proprietà label esempio: dato  <div>Versione :<span>1.0</span></div> test="variabile" label="Versione :" restiruirà l'oggetto <span>1.0</span>

object – elemento <object>
oggettocomplesso – oggetto strutturato con componenti interne multiple

jsonelement – elemento rappresentato in formato JSON

xmlelement – elemento rappresentato in formato XML

titolofinestra – titolo della finestra browser

window – restituisce il numero di finestre nel browser, puo essere usato per condizionare una azione

loader – indicatore di caricamento

3.2 Azioni o logiche non legate a un elemento DOM

Usati per eseguire azioni, comandi, elaborazioni o interazioni con dati esterni:

plugin – esecuzione di un plugin esterno 

pdf_compare – confronto tra documenti PDF parametri : 
  - variabile =  nome della variabile in cui restituisce il valore del confronto Ok se success.
  - nomePdf = Path del pdf da testare
  - template = PAth del template I-ACAD da usare per il confronto

pdf_value – estrazione di valori da un PDF  parametri: 
  - variabile = nome della variabile in cui restituire i valori sotto forma di struttura es nomevariabile.Nome , nomevariabile.Cognome. 
  - template = PAth del template I-ACAD utilizzato per estrarre i dati. 
  - nomePdf  = Path del pdf da cui estrarre i dati

pdf_exec – esecuzione di una funzione di I-ACAD su un determinato pdf. Parametri:
   - variabile = variabile creata su sui mettere ok, ko, not found . Verrà sempre riportata nel report dello scenario
   - report = nome della struttura che verrà creata   report.nome_esito report.nome_descrizione , e nome del file di excel che verrà creato ed allegato al report dello scenario
   - nomePdf =  Path del pdf su cui eseguire lo scenario
   - template = Path dello scenario di I_ACAD (.acad_s) da eseguire

strutturadafontedati – Crea una variabile di tipo struttura leggendo i dati da una fonte dati. Parametri:
  - struttura1 = Nome della struttura da creare , esempio di  variabili che verranno create  struttura1.Nome , struttura1.Cognome ecc..
  - filename =  Path della configurazione di una fonte dati definita in I-ABAT 
  - tipo = Tipologia della fonte dati es: "Sql Server" , "Oracle" ...., "Excel" , "Files" , "Web"
  - query = Query da utilizzare per estrarre i record esempio: Select * from anagrafica se possibile verrà utilizzato il record con lo stesso indice della riga dello scenario in esecuzione, altrimenti il primo record


confronta – confronto tra valori/elementi

compila – compilazione di dati o form

exec – esecuzione generica di comandi

execvb – esecuzione di script VB

execjs – esecuzione di script JavaScript

variabililocali – gestione di variabili di scenario (flag, dati, stato)

salvadocumento – salvataggio di un documento

salvadownload – salvataggio di un file scaricato

screenshot – cattura screenshot della pagina

savehtml – salvataggio HTML della pagina

dialogwindow – gestione finestra di dialogo nativa del browser

chiudi – chiusura di una finestra o tab

massimizza – massimizzazione della finestra

scrolltobottom – scroll fino a fondo pagina

scrolltotop – scroll fino all’inizio della pagina

createvariablefromdb – creazione di variabile da dati in DB

attesa – pausa/attesa temporizzata

interrompi – interruzione dello scenario

errore – generazione o verifica condizione di errore

successo – marcatura di esito positivo

warning – generazione di avviso

url – impostazione o verifica URL corrente

urlnew – apertura di un nuovo URL in finestra o tab

chiudifinestresecondarie – chiusura di tutte le finestre secondarie

### Regole di risoluzione degli oggetti

- Se è presente `xPath` (o `tmpxPath`), la ricerca dell’oggetto nel DOM avviene direttamente tramite selettore.
- Se assente, la ricerca avviene tramite `label` o altre regole custom.
- Per gli oggetti non web, il campo `label` è usato come chiave logica, non per ricerca nel DOM.

#### Esempio HTML con xpath

```json
{
  "test": {
    "element": {
      "test": "pulsante",
      "label": "Conferma",
      "tmpxPath": "(//button[@type='submit'])[1]"
    }
  },
  "values": ["click"]
}
```

#### Esempio oggetto logico

```json
{
  "test": {
    "element": {
      "test": "variabililocali",
      "label": "AdeguataVerifica",
      "dati": "{\"hidden\":true,\"globale\":false}"
    }
  },
  "values": ["NO"]
}
```

## 4. Valori, condizioni, input

- **`values`**: array con i valori da impostare/applicare/attendere.
- **`input`**: rappresentazione dell’input (serializzata o oggetto).
- **Condizioni**: alcuni oggetti possono avere un array `condizioni`, che specificano logiche di attivazione/esecuzione (es. solo se una variabile è uguale a un certo valore).
- **`guid`**: identificativo univoco dell’azione (facoltativo ma consigliato).

## 5. Estendibilità

Nuovi tipi di oggetto/azione possono essere aggiunti. Ogni nuovo tipo deve essere documentato in questa guida, specificando:
- Regole di ricerca/identificazione (xpath, label, ecc.)
- Semantica dei valori
- Comportamento atteso

## 6. Best practice

- Usare sempre `guid` per identificare univocamente ogni punto mask.
- Preferire `xPath` quando possibile per oggetti web.
- Mantenere coerenza di nomenclatura per i label e i tipi di oggetto.
- Aggiornare questa documentazione ogni volta che viene introdotto un nuovo tipo di oggetto o logica.

---

**Questo file è il riferimento principale per la comprensione e la manipolazione dei file `.mask` nel repository.**
